CompUnit      ::= FuncDef;

Number        ::= INT_CONST;
String        ::= "\"" STR_CONST "\"";

(* Const & Variable *)
Decl          ::= ConstDecl | VarDecl;
BType         ::= "INTEGER";
ConstDecl     ::= "CONSTANT" IDENTIFIER "=" ConstInitVal;
ConstInitVal  ::= ConstExp | ConstStr;
VarDecl       ::= "DECLARE" IDENTIFIER ":" BType;
ConstExp      ::= Exp;
ConstStr      ::= String;

(* Function *)
FuncDef       ::= FUNCTION IDENTIFIER "(" ")" RETURNS FuncType Block ENDFUNCTION;
FuncType      ::= "INTEGER";

Block         ::= { BlockItem };
BlockItem     ::= Decl | Stmt;
Stmt          ::= LVal "<-" Exp
              | "IF" Exp "THEN" Block ["ELSE" Block] "ENDIF"
              | "RETURN" Exp;

(* Expression *)
Exp           ::= LOrExp;
LVal          ::= IDENTIFIER;
PrimaryExp    ::= "(" Exp ")" | Number | LVal;
UnaryExp      ::= PrimaryExp | UnaryOp UnaryExp;
UnaryOp       ::= "+" | "-" | "NOT";
MulExp        ::= UnaryExp | MulExp ("*" | "/" | "DIV" | "MOD") UnaryExp;
AddExp        ::= MulExp | AddExp ("+" | "-") MulExp;
RelExp        ::= AddExp | RelExp ("<" | ">" | "<=" | ">=") AddExp;
EqExp         ::= RelExp | EqExp ("=" | "<>") RelExp;
LAndExp       ::= EqExp | LAndExp "AND" EqExp;
LOrExp        ::= LAndExp | LOrExp "OR" LAndExp;
