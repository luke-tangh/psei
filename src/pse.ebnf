CompUnit         ::= { CompUnit } ( BlockItem | FuncDef | ProcDef );

(* Literials *)
Literial         ::= Number | String | Char | Boolean | Date;
Number           ::= INT_CONST | REAL_CONST;
Exp              ::= LOrExp;
String           ::= "\"" STR_CONST "\"";
Char             ::= "'" CHAR_CONST "'";
Boolean          ::= "TRUE" | "FALSE";
Date             ::= [0-9]{2}[-/.][0-9]{2}[-/.][0-9]{4};

(* Constants & Variables *)
Decl             ::= ConstDecl | VarDecl;
BType            ::= "INTEGER" | "REAL" | "CHAR" | "STRING" | "BOOLEAN" | "DATE" | IDENTIFIER;
ConstDecl        ::= "CONSTANT" IDENTIFIER "=" Exp;
VarDecl          ::= "DECLARE" IDENTIFIER ":" BType
                   | "DECLARE" IDENTIFIER ":" "ARRAY" "[" Exp ":" Exp { "," Exp ":" Exp } "]" "OF" BType
                   ;

(* User-defined Data Types *)
UserDefType      ::= "TYPE" IDENTIFIER "=" "(" Enum ")" 
                   | "TYPE" IDENTIFIER "=" "^" BType 
                   | "TYPE" IDENTIFIER Record 
                   | "TYPE" IDENTIFIER "=" "SET" "OF" BType
                   | "DEFINE" IDENTIFIER SetVals ":" BType
                   ;
Enum             ::= IDENTIFIER { "," IDENTIFIER };
Record           ::= { VarDecl } "ENDTYPE";

(* Procedure & Function *)
FuncDef          ::= "FUNCTION" IDENTIFIER "(" [ ParamList ] ")" "RETURNS" BType Block "ENDFUNCTION";
ProcDef          ::= "PROCEDURE" IDENTIFIER "(" [ ParamList ] ")" Block "ENDPROCEDURE";
ParamList        ::= Param { "," Param };
Param            ::= [ PassBy ] IDENTIFIER ":" BType;
PassBy           ::= "BYVAL" | "BYREF";
FuncCall         ::= LVal "(" [ ArgList ] ")";
ArgList          ::= Exp { "," Exp };

(* Object-oriented Programming *)
ClassDef         ::= "CLASS" IDENTIFIER { ClassMembers } OptionalInherits "ENDCLASS";
OptionalInherits ::= [ "INHERITS" IDENTIFIER ];
ClassMembers     ::= AccessLevel ( ClassMethod | ClassProperty );
AccessLevel      ::= "PUBLIC" | "PRIVATE";
ClassProperty    ::= IDENTIFIER ":" BType;
ClassMethod      ::= FuncDef | ProcDef | ConstructorDef;
ClassInit        ::= "NEW" IDENTIFIER "(" [ ArgList ] ")";

(* Block & Statement *)
Block            ::= { BlockItem };
BlockItem        ::= Decl | Stmt | UserDefType;
Stmt             ::= LVal "<-" Exp
                   | "IF" Exp "THEN" Block ["ELSE" Block] "ENDIF"
                   | "CASE" "OF" IDENTIFIER { CaseItem } [ "OTHERWISE" ":" Block ] "ENDCASE"
                   | "FOR" IDENTIFIER "<-" Exp "TO" Exp ["STEP" Exp] Block "NEXT" IDENTIFIER
                   | "REPEAT" Block "UNTIL" Exp
                   | "WHILE" Exp Block "ENDWHILE"
                   | "RETURN" Exp
                   | "INPUT" IDENTIFIER
                   | "OUTPUT" Exp { "," ( Exp ) }
                   | "OPENFILE" String "FOR" ( "READ" | "WRITE" | "APPEND" | "RANDOM" )
                   | "READFILE" String "," IDENTIFIER
                   | "WRITEFILE" String "," Exp
                   | "CLOSEFILE" String
                   | "SEEK" String "," Exp
                   | "GETRECORD" String "," IDENTIFIER
                   | "PUTRECORD" String "," IDENTIFIER
                   | "SUPER" "." "NEW" "(" [ ArgList ] ")"
                   ;
CaseItem         ::= ( Literial | Literial "TO" Literial ) ":" Block;

(* Value *)
LVal             ::= IDENTIFIER
                   | LVal "." IDENTIFIER
                   | LVal "[" Exp { "," Exp } "]";

(* Expression *)
PrimaryExp       ::= "(" Exp ")" | Literial | LVal | FuncCall | ClassInit | EOFExp;
UnaryExp         ::= PrimaryExp | UnaryOp UnaryExp;
UnaryOp          ::= "+" | "-" | "NOT";
MulExp           ::= UnaryExp | MulExp ("*" | "/" | "DIV" | "MOD") UnaryExp;
AddExp           ::= MulExp | AddExp ("+" | "-") MulExp;
RelExp           ::= AddExp | RelExp ("<" | ">" | "<=" | ">=") AddExp;
EqExp            ::= RelExp | EqExp ("=" | "<>") RelExp;
LAndExp          ::= EqExp | LAndExp "AND" EqExp;
LOrExp           ::= LAndExp | LOrExp "OR" LAndExp;
EOFExp           ::= "EOF" "(" String ")";
