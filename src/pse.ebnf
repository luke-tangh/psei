CompUnit      ::= {CompUnit} (BlockItem | FuncDef);

Number        ::= INT_CONST;
Exp           ::= LOrExp;
String        ::= "\"" STR_CONST "\"";
Char          ::= "'" CHAR_CONST "'";
Boolean       ::= "TRUE" | "FALSE";
Date          ::= [0-9]{2}[-/.][0-9]{2}[-/.][0-9]{4};

(* Const & Variable *)
Decl          ::= ConstDecl | VarDecl;
BType         ::= "INTEGER" | "REAL" | "CHAR" | "STRING" | "BOOLEAN" | "DATE";
ConstDecl     ::= "CONSTANT" IDENTIFIER "=" Exp;
VarDecl       ::= "DECLARE" IDENTIFIER ":" BType
                | "DECLARE" IDENTIFIER ":" "ARRAY" "[" ArrRange { "," ArrRange } "]" "OF" BType;
ArrRange      ::= Exp ":" Exp;

(* Function *)
FuncDef       ::= FUNCTION IDENTIFIER "(" [ ParamList ] ")" RETURNS FuncType Block ENDFUNCTION;
ParamList     ::= Param { "," Param };
Param         ::= IDENTIFIER ":" BType;
FuncType      ::= BType | UserDefType;
UserDefType   ::= IDENTIFIER;

Block         ::= { BlockItem };
BlockItem     ::= Decl | Stmt;
Stmt          ::= LVal "<-" Exp
                | "IF" Exp "THEN" Block ["ELSE" Block] "ENDIF"
                | "FOR" IDENTIFIER "<-" Exp "TO" Exp ["STEP" Exp] Block "NEXT" IDENTIFIER
                | "REPEAT" Block "UNTIL" Exp
                | "WHILE" Exp Block "ENDWHILE"
                | "RETURN" Exp;

(* Expression *)
LVal          ::= IDENTIFIER | IDENTIFIER "[" Exp { "," Exp } "]";
PrimaryExp    ::= "(" Exp ")" | Number | String | Char | Boolean | Date | LVal;
UnaryExp      ::= PrimaryExp | UnaryOp UnaryExp;
UnaryOp       ::= "+" | "-" | "NOT";
MulExp        ::= UnaryExp | MulExp ("*" | "/" | "DIV" | "MOD") UnaryExp;
AddExp        ::= MulExp | AddExp ("+" | "-") MulExp;
RelExp        ::= AddExp | RelExp ("<" | ">" | "<=" | ">=") AddExp;
EqExp         ::= RelExp | EqExp ("=" | "<>") RelExp;
LAndExp       ::= EqExp | LAndExp "AND" EqExp;
LOrExp        ::= LAndExp | LOrExp "OR" LAndExp;
