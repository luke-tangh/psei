CompUnit      ::= {CompUnit} (BlockItem | FuncDef);

Literial      ::= Number | String | Char | Boolean | Date;
Number        ::= INT_CONST | REAL_CONST;
Exp           ::= LOrExp;
String        ::= "\"" STR_CONST "\"";
Char          ::= "'" CHAR_CONST "'";
Boolean       ::= "TRUE" | "FALSE";
Date          ::= [0-9]{2}[-/.][0-9]{2}[-/.][0-9]{4};

(* Constants & Variables *)
Decl          ::= ConstDecl | VarDecl;
BType         ::= "INTEGER" | "REAL" | "CHAR" | "STRING" | "BOOLEAN" | "DATE";
ConstDecl     ::= "CONSTANT" IDENTIFIER "=" Exp;
VarDecl       ::= "DECLARE" IDENTIFIER ":" BType
                | "DECLARE" IDENTIFIER ":" "ARRAY" "[" Exp ":" Exp { "," Exp ":" Exp } "]" "OF" BType;

(* Function *)
FuncDef       ::= "FUNCTION" IDENTIFIER "(" [ ParamList ] ")" "RETURNS" BType Block "ENDFUNCTION";
ProcDef       ::= "PROCEDURE" IDENTIFIER "(" [ ParamList ] ")" Block "ENDPROCEDURE";
ParamList     ::= Param { "," Param };
Param         ::= [ PassBy ] IDENTIFIER ":" BType;
PassBy        ::= "BYVAL" | "BYREF";
FuncCall      ::= IDENTIFIER "(" [ ArgList ] ")";
ArgList       ::= Exp { "," Exp };

(* Block & Statement *)
Block         ::= { BlockItem };
BlockItem     ::= Decl | Stmt;
Stmt          ::= LVal "<-" Exp
                | "IF" Exp "THEN" Block ["ELSE" Block] "ENDIF"
                | "CASE" "OF" IDENTIFIER { ( Exp | Range ) ":" Block } [ "OTHERWISE" ":" Block ] "ENDCASE"
                | "FOR" IDENTIFIER "<-" Exp "TO" Exp ["STEP" Exp] Block "NEXT" IDENTIFIER
                | "REPEAT" Block "UNTIL" Exp
                | "WHILE" Exp Block "ENDWHILE"
                | "RETURN" Exp
                | "INPUT" IDENTIFIER
                | "OUTPUT" Exp { "," ( Exp ) };

(* Value *)
LVal          ::= IDENTIFIER 
                | IDENTIFIER "[" Exp { "," Exp } "]";

(* Expression *)
PrimaryExp    ::= "(" Exp ")" | Literial | LVal | FuncCall;
UnaryExp      ::= PrimaryExp | UnaryOp UnaryExp;
UnaryOp       ::= "+" | "-" | "NOT";
MulExp        ::= UnaryExp | MulExp ("*" | "/" | "DIV" | "MOD") UnaryExp;
AddExp        ::= MulExp | AddExp ("+" | "-") MulExp;
RelExp        ::= AddExp | RelExp ("<" | ">" | "<=" | ">=") AddExp;
EqExp         ::= RelExp | EqExp ("=" | "<>") RelExp;
LAndExp       ::= EqExp | LAndExp "AND" EqExp;
LOrExp        ::= LAndExp | LOrExp "OR" LAndExp;
